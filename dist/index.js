"use strict";

require("source-map-support/register");

/**
 * Module dependencies.
 */
var app = require('../app');

var debug = require('debug')('boilerplate-microservice:server');

var http = require('http');
/**
 * Get port from environment and store in Express.
 */


var port = normalizePort(process.env.X_PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
/**
 * Event listener for HTTP server "error" event.
 */


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port; // handle specific listen errors with friendly messages

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;

    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;

    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJhcHAiLCJyZXF1aXJlIiwiZGVidWciLCJodHRwIiwicG9ydCIsIm5vcm1hbGl6ZVBvcnQiLCJwcm9jZXNzIiwiZW52IiwiWF9QT1JUIiwic2V0Iiwic2VydmVyIiwiY3JlYXRlU2VydmVyIiwibGlzdGVuIiwib24iLCJvbkVycm9yIiwib25MaXN0ZW5pbmciLCJ2YWwiLCJwYXJzZUludCIsImlzTmFOIiwiZXJyb3IiLCJzeXNjYWxsIiwiYmluZCIsImNvZGUiLCJjb25zb2xlIiwiZXhpdCIsImFkZHIiLCJhZGRyZXNzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztBQUlBLElBQUlBLEdBQUcsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBakI7O0FBQ0EsSUFBSUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFQLENBQWlCLGlDQUFqQixDQUFaOztBQUNBLElBQUlFLElBQUksR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBbEI7QUFFQTs7Ozs7QUFJQSxJQUFJRyxJQUFJLEdBQUdDLGFBQWEsQ0FBQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE1BQVosSUFBc0IsTUFBdkIsQ0FBeEI7QUFDQVIsR0FBRyxDQUFDUyxHQUFKLENBQVEsTUFBUixFQUFnQkwsSUFBaEI7QUFFQTs7OztBQUlBLElBQUlNLE1BQU0sR0FBR1AsSUFBSSxDQUFDUSxZQUFMLENBQWtCWCxHQUFsQixDQUFiO0FBRUE7Ozs7QUFJQVUsTUFBTSxDQUFDRSxNQUFQLENBQWNSLElBQWQ7QUFDQU0sTUFBTSxDQUFDRyxFQUFQLENBQVUsT0FBVixFQUFtQkMsT0FBbkI7QUFDQUosTUFBTSxDQUFDRyxFQUFQLENBQVUsV0FBVixFQUF1QkUsV0FBdkI7QUFFQTs7OztBQUlBLFNBQVNWLGFBQVQsQ0FBdUJXLEdBQXZCLEVBQTRCO0FBQzFCLE1BQUlaLElBQUksR0FBR2EsUUFBUSxDQUFDRCxHQUFELEVBQU0sRUFBTixDQUFuQjs7QUFFQSxNQUFJRSxLQUFLLENBQUNkLElBQUQsQ0FBVCxFQUFpQjtBQUNmO0FBQ0EsV0FBT1ksR0FBUDtBQUNEOztBQUVELE1BQUlaLElBQUksSUFBSSxDQUFaLEVBQWU7QUFDYjtBQUNBLFdBQU9BLElBQVA7QUFDRDs7QUFFRCxTQUFPLEtBQVA7QUFDRDtBQUVEOzs7OztBQUlBLFNBQVNVLE9BQVQsQ0FBaUJLLEtBQWpCLEVBQXdCO0FBQ3RCLE1BQUlBLEtBQUssQ0FBQ0MsT0FBTixLQUFrQixRQUF0QixFQUFnQztBQUM5QixVQUFNRCxLQUFOO0FBQ0Q7O0FBRUQsTUFBSUUsSUFBSSxHQUFHLE9BQU9qQixJQUFQLEtBQWdCLFFBQWhCLEdBQ1AsVUFBVUEsSUFESCxHQUVQLFVBQVVBLElBRmQsQ0FMc0IsQ0FTdEI7O0FBQ0EsVUFBUWUsS0FBSyxDQUFDRyxJQUFkO0FBQ0UsU0FBSyxRQUFMO0FBQ0VDLE1BQUFBLE9BQU8sQ0FBQ0osS0FBUixDQUFjRSxJQUFJLEdBQUcsK0JBQXJCO0FBQ0FmLE1BQUFBLE9BQU8sQ0FBQ2tCLElBQVIsQ0FBYSxDQUFiO0FBQ0E7O0FBQ0YsU0FBSyxZQUFMO0FBQ0VELE1BQUFBLE9BQU8sQ0FBQ0osS0FBUixDQUFjRSxJQUFJLEdBQUcsb0JBQXJCO0FBQ0FmLE1BQUFBLE9BQU8sQ0FBQ2tCLElBQVIsQ0FBYSxDQUFiO0FBQ0E7O0FBQ0Y7QUFDRSxZQUFNTCxLQUFOO0FBVko7QUFZRDtBQUVEOzs7OztBQUlBLFNBQVNKLFdBQVQsR0FBdUI7QUFDckIsTUFBSVUsSUFBSSxHQUFHZixNQUFNLENBQUNnQixPQUFQLEVBQVg7QUFDQSxNQUFJTCxJQUFJLEdBQUcsT0FBT0ksSUFBUCxLQUFnQixRQUFoQixHQUNQLFVBQVVBLElBREgsR0FFUCxVQUFVQSxJQUFJLENBQUNyQixJQUZuQjtBQUdBRixFQUFBQSxLQUFLLENBQUMsa0JBQWtCbUIsSUFBbkIsQ0FBTDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXHJcbiAqL1xyXG5cclxudmFyIGFwcCA9IHJlcXVpcmUoJy4uL2FwcCcpO1xyXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdib2lsZXJwbGF0ZS1taWNyb3NlcnZpY2U6c2VydmVyJyk7XHJcbnZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xyXG5cclxuLyoqXHJcbiAqIEdldCBwb3J0IGZyb20gZW52aXJvbm1lbnQgYW5kIHN0b3JlIGluIEV4cHJlc3MuXHJcbiAqL1xyXG5cclxudmFyIHBvcnQgPSBub3JtYWxpemVQb3J0KHByb2Nlc3MuZW52LlhfUE9SVCB8fCAnMzAwMCcpO1xyXG5hcHAuc2V0KCdwb3J0JywgcG9ydCk7XHJcblxyXG4vKipcclxuICogQ3JlYXRlIEhUVFAgc2VydmVyLlxyXG4gKi9cclxuXHJcbnZhciBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihhcHApO1xyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiBwcm92aWRlZCBwb3J0LCBvbiBhbGwgbmV0d29yayBpbnRlcmZhY2VzLlxyXG4gKi9cclxuXHJcbnNlcnZlci5saXN0ZW4ocG9ydCk7XHJcbnNlcnZlci5vbignZXJyb3InLCBvbkVycm9yKTtcclxuc2VydmVyLm9uKCdsaXN0ZW5pbmcnLCBvbkxpc3RlbmluZyk7XHJcblxyXG4vKipcclxuICogTm9ybWFsaXplIGEgcG9ydCBpbnRvIGEgbnVtYmVyLCBzdHJpbmcsIG9yIGZhbHNlLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVBvcnQodmFsKSB7XHJcbiAgdmFyIHBvcnQgPSBwYXJzZUludCh2YWwsIDEwKTtcclxuXHJcbiAgaWYgKGlzTmFOKHBvcnQpKSB7XHJcbiAgICAvLyBuYW1lZCBwaXBlXHJcbiAgICByZXR1cm4gdmFsO1xyXG4gIH1cclxuXHJcbiAgaWYgKHBvcnQgPj0gMCkge1xyXG4gICAgLy8gcG9ydCBudW1iZXJcclxuICAgIHJldHVybiBwb3J0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG4vKipcclxuICogRXZlbnQgbGlzdGVuZXIgZm9yIEhUVFAgc2VydmVyIFwiZXJyb3JcIiBldmVudC5cclxuICovXHJcblxyXG5mdW5jdGlvbiBvbkVycm9yKGVycm9yKSB7XHJcbiAgaWYgKGVycm9yLnN5c2NhbGwgIT09ICdsaXN0ZW4nKSB7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcblxyXG4gIHZhciBiaW5kID0gdHlwZW9mIHBvcnQgPT09ICdzdHJpbmcnXHJcbiAgICA/ICdQaXBlICcgKyBwb3J0XHJcbiAgICA6ICdQb3J0ICcgKyBwb3J0O1xyXG5cclxuICAvLyBoYW5kbGUgc3BlY2lmaWMgbGlzdGVuIGVycm9ycyB3aXRoIGZyaWVuZGx5IG1lc3NhZ2VzXHJcbiAgc3dpdGNoIChlcnJvci5jb2RlKSB7XHJcbiAgICBjYXNlICdFQUNDRVMnOlxyXG4gICAgICBjb25zb2xlLmVycm9yKGJpbmQgKyAnIHJlcXVpcmVzIGVsZXZhdGVkIHByaXZpbGVnZXMnKTtcclxuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ0VBRERSSU5VU0UnOlxyXG4gICAgICBjb25zb2xlLmVycm9yKGJpbmQgKyAnIGlzIGFscmVhZHkgaW4gdXNlJyk7XHJcbiAgICAgIHByb2Nlc3MuZXhpdCgxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFdmVudCBsaXN0ZW5lciBmb3IgSFRUUCBzZXJ2ZXIgXCJsaXN0ZW5pbmdcIiBldmVudC5cclxuICovXHJcblxyXG5mdW5jdGlvbiBvbkxpc3RlbmluZygpIHtcclxuICB2YXIgYWRkciA9IHNlcnZlci5hZGRyZXNzKCk7XHJcbiAgdmFyIGJpbmQgPSB0eXBlb2YgYWRkciA9PT0gJ3N0cmluZydcclxuICAgID8gJ3BpcGUgJyArIGFkZHJcclxuICAgIDogJ3BvcnQgJyArIGFkZHIucG9ydDtcclxuICBkZWJ1ZygnTGlzdGVuaW5nIG9uICcgKyBiaW5kKTtcclxufVxyXG4iXX0=